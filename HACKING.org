* Testing on other projects

The =tools/test_branch.sh= script builds 2 revisions of OCamlformat and run them
on the sources of some projects.
The list of tested project is (and can be edited) in =test-extra/Makefile=.

The projects sources are cloned into =test-extra/code=.
Git is used to manage the script's state:
- staged changes are the diffs introduced by formatting with the first revision
- unstaged changes are the diffs introduced by upgrading OCamlformat to the
  second rev

* Release procedure

- Review the impact of the release on real source code:
  In =test-extra/Makefile=, uncomment the extended list of projects to test
  and run =tools/test_branch.sh -a "previous_release"=.
  Diffs should be discussed with the maintainers of these projects to gather
  feedback before continuing the release.

- If a supported OCaml version does not have CI support, run test suite locally.

- In =CHANGES.md=, change =(unreleased)= with the current version (=a.b.c=)
  and date. Commit the result.

- Tag and push
  =dune-release tag=
  =git push --tags=

- Check that release binary has a release version number:
  =dune exec ocamlformat -- --version= should output just =a.b.c=

- Create the archive
  =dune-release distrib=

- Publish the release on Github
  =dune-release publish distrib=
  To the prompt =Push tag a.b.c to ...?=, answer =s=

- Release on Opam-repository
  =dune-release opam pkg=
  =dune-release opam submit=

- Each release should be announced on [[https://discuss.ocaml.org/]]

* Backporting changes to a point release

Sometimes it is helpful to create a point release, but master contains
changes that would be unsuitable for a point release.

Suppose the last release is 0.3.5, and since then, master contains new
features F1 and F2 and a bugfix B.

#+BEGIN_SRC
release 0.3.5 -> feature F1 -> bugfix B -> feature F2
tag: 0.3.5                                 branch: master
#+END_SRC

Instead of reverting F1 and F2 in master, one can create a release branch for
the 0.3 releases.

The end graph looks like this (if this is the first point release done this
way in the 0.3.x series):

#+BEGIN_SRC
release 0.3.5 -> feature F1 -> bugfix B -> feature F2 -> merge commit
tag: 0.3.5                                               branch: master
            \                                          /
              -> bugfix B -> release 0.3.6  ----------
                             tag: 0.3.6
                             branch: 0.3
#+END_SRC

Or (if a previous point release has been made in the same way):

#+BEGIN_SRC
 past  ->  merge commit -> feature F1 -> bugfix B -> feature F2 -> merge commit
               /                                       branch: master
              /                                       /
 release 0.3.5  -> bugfix B -> release 0.3.6  -------
 tag: 0.3.5                    tag: 0.3.6
                               branch: 0.3
#+END_SRC

Notes:
- the release branch is always merged into master, not the other way around.
- version detection relies on git tags, so master will be marked 0.3.5-x
  before the merge and 0.3.6-x after.

** Step 1: prepare release branch

- Is there an existing release branch?
  + No (this is the first time we are doing this on the 0.3.x series - first schema above).
    * Position to the latest 0.3.x release and create a branch named 0.3 here.
    * Example: =git checkout 0.3.6 -b 0.3=
  + Yes, branch 0.3 already exists (ie we already used this technique before - second schema above).
    * In this case, position to the 0.3 branch, which should be at the latest release (not a merge commit).
    * Example: =git checkout 0.3=

- Cherry-pick bugfix (or bugfixes).
  + Example: =git cherry-pick aaaaa bbbbb=
  + These may not apply cleanly, so fix conflicts and QA (using CI, etc) as usual.
  + For the changelog in particular, the entry for the bugfix should go in a new section, and new features should not appear.

Changelog in master:

#+BEGIN_SRC
### unreleased

- Feature F1

- Bugfix B

- Feature F2

### 0.3.5

...
#+END_SRC

Changelog in 0.3 release branch:

#+BEGIN_SRC
### unreleased

- Bugfix B

### 0.3.5

...
#+END_SRC

** Step 2: create release

- Create release from branch 0.3 as usual. In particular, change "unreleased"
  to the new version, 0.3.6.

- Continue process until PR to opam-repository is merged.

** Step 3: merge release branch

- Wait for opam-repository PR to be merged.

- Merge release branch into master.
  + Not as a PR; as a manual merge.
  + Example: =git checkout master= followed by =git merge 0.3=.
  + This may conflict, in particular in the changelog.
  + To resolve the changelog conflict, add the point release section into master, and remove backported entries from the unreleased section.

Changelog in master before merging:

#+BEGIN_SRC
### unreleased

- Feature F1

- Bugfix B

- Feature F2

### 0.3.5

...
#+END_SRC

Changelog in 0.3 release branch:

#+BEGIN_SRC
### 0.3.6

- Bugfix B

### 0.3.5

...
#+END_SRC

End state:

#+BEGIN_SRC
### unreleased

- Feature F1

- Feature F2

### 0.3.6

- Bugfix B

### 0.3.5

...
#+END_SRC
