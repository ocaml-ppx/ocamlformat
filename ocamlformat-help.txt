NAME
       ocamlformat - A tool to format OCaml code.

SYNOPSIS
       ocamlformat [OPTION]... [SRC]...

DESCRIPTION
       ocamlformat automatically formats OCaml code.

OPTIONS (CODE FORMATTING STYLE)
       Unless otherwise noted, any option --option=VAL detailed in this
       section can be set in many ways, its value is determined in the
       following order (of increasing priority): the default value is used if
       no other value is specified, the value can be modified in an
       .ocamlformat configuration file with an 'option = VAL' line (*), or
       using the OCAMLFORMAT environment variable:
       OCAMLFORMAT=option=VAL,...,option=VAL, or as an optional parameter on
       the command line, or with a global [@@@ocamlformat "option=VAL"]
       attribute in the processed file, or with an [@@ocamlformat
       "option=VAL"] attribute on expression in the processed file.

       (*) .ocamlformat files in current and all ancestor directories for
       each input file are used, as well as the global .ocamlformat file
       defined in $XDG_CONFIG_HOME/ocamlformat. The global .ocamlformat file
       has the lowest priority, then the closer the directory is to the
       processed file, the higher the priority.

       --break-cases={fit|nested|all}
           Break pattern match cases. Specifying fit lets pattern matches
           break at the margin naturally. nested forces a break after nested
           or-patterns to highlight the case body. all forces all pattern
           matches to break across lines. The default value is fit.

       --break-collection-expressions={fit-or-vertical|wrap}
           Break collection expressions (lists and arrays) elements by
           elements. fit-or-vertical vertically breaks expressions if they do
           not fit on a single line. wrap will group simple expressions and
           try to format them in a single line. The default value is
           fit-or-vertical.

       --break-infix={wrap|fit-or-vertical}
           Break sequence of infix operators. wrap will group simple
           expressions and try to format them in a single line.
           fit-or-vertical vertically breaks expressions if they do not fit
           on a single line. The default value is wrap.

       --break-separators={before|after|after-and-docked}
           Break before or after separators such as `;` in list or record
           expressions. before breaks the expressions before the separator.
           after breaks the expressions after the separator. after-and-docked
           breaks the expressions after the separator and docks the brackets
           for records. The default value is before.

       --break-sequences
           Force sequence expressions to break irrespective of margin.

       --break-string-literals={wrap|newlines|never}
           Break string literals. wrap mode wraps string literals at the
           margin. Quoted strings such as {id|...|id} are preserved. newlines
           mode breaks lines at newlines. never mode formats string literals
           as they are parsed, in particular, with escape sequences expanded.
           The default value is wrap.

       --break-struct={force|natural}
           Break struct-end module items. force will break struct-end phrases
           unconditionally. natural will break struct-end phrases naturally
           at the margin. The default value is force.

       --cases-exp-indent=COLS
           Indentation of cases expressions (COLS columns), except for nested
           `match` or `try` expressions. The default value is 4. Cannot be
           set in attributes.

       --disable
           Disable ocamlformat. This is used in attributes to locally disable
           automatic code formatting. One can also use [@@@ocamlformat
           "enable"] instead of [@@@ocamlformat "disable=false"]

       --doc-comments={after|before}
           Doc comments position. after puts doc comments after the
           corresponding code. before puts comments before the corresponding
           code. The default value is after.

       --escape-chars={preserve|decimal|hexadecimal}
           Escape encoding for character literals. preserve escapes ASCII
           control codes but leaves the upper 128 characters unchanged.
           decimal produces ASCII printable characters using decimal escape
           sequences as needed. hexadecimal mode escapes every character. The
           default value is preserve.

       --escape-strings={preserve|decimal|hexadecimal}
           Escape encoding for string literals. See `--escape-chars` for the
           interpretation of the modes. The default value is preserve.

       --extension-sugar={preserve|always}
           Extension formatting. The default value is preserve.

       --field-space={tight|loose}
           Whether or not to use a space between a field name and the rhs.
           This option affects records and objects. tight does not use a
           space between a field name and the punctuation symbol (`:`or `=`).
           loose does. The default value is tight.

       --if-then-else={compact|keyword-first}
           If-then-else formatting. compact tries to format an if-then-else
           expression on a single line. keyword-first formats if-then-else
           expressions such that the if-then-else keywords are the first on
           the line. The default value is compact.

       --infix-precedence={indent|parens}
           Use indentation or also discretionary parentheses to explicitly
           disambiguate precedences of infix operators. indent uses
           indentation to explicitly disambiguate precedences of infix
           operators. parens uses parentheses to explicitly disambiguate
           precedences of infix operators. The default value is indent.

       --leading-nested-match-parens
           Nested match parens formatting. Cannot be set in attributes.

       --let-and={compact|sparse}
           Style of let_and. compact will try to format `let p = e and p = e`
           in a single line. sparse will always break between them. The
           default value is compact.

       --let-binding-spacing={compact|sparse|double-semicolon}
           Spacing between let binding. compact spacing separates adjacent
           let bindings in a module according to module-item-spacing. sparse
           places two open lines between a multi-line module-level let
           binding and the next. double-semicolon places double semicolons
           and an open line between a multi-line module-level let binding and
           the next. The default value is compact.

       --let-open={preserve|short|long|auto}
           Module open formatting. preserve keeps the original style. short
           means the Module.(...) style is used. long means the let open
           Module in (...) style is used. auto means the one fitting best is
           used. The default value is preserve.

       -m COLS, --margin=COLS
           Format code to fit within COLS columns. The default value is 80.
           Cannot be set in attributes.

       --module-item-spacing={sparse|compact}
           Spacing between items of structures and signatures. sparse will
           always break a line between two items. compact will not leave open
           lines between one-liners of similar sorts. The default value is
           sparse.

       --no-break-infix-before-func
           Break infix operators whose right arguments are anonymous
           functions specially: do not break after the operator so that the
           first line of the function appears docked at the end of line after
           the operator.

       --no-indicate-multiline-delimiters
           Print a space inside a delimiter to indicate that it's matching
           delimiter is on a different line.

       --no-indicate-nested-or-patterns
           Control whether or not to indicate nested or-pattern using
           indentation.

       --no-wrap-fun-args
           Style for function call and function definition.

       --ocp-indent-compat
           Attempt to generate output which does not change (much) when
           post-processing with ocp-indent.

       --parens-ite
           Uses parentheses around if-then-else branches that spread across
           multiple lines.

       --parens-tuple={always|multi-line-only}
           Parens tuple expressions. always always uses parentheses around
           tuples. multi-line-only mode will try to skip parens for
           single-line tuples. The default value is always.

       --parens-tuple-patterns={multi-line-only|always}
           Parens tuple patterns. multi-line-only mode will try to skip
           parens for single-line tuple patterns. always always uses
           parentheses around tuples patterns. The default value is
           multi-line-only.

       --parse-docstrings
           Parse and format docstrings.

       --sequence-style={separator|terminator}
           Style of sequence. separator puts spaces before and after
           semicolons. terminator only puts spaces after semicolons. The
           default value is separator.

       --single-case={compact|sparse}
           Style of pattern matching expressions with only a single case.
           compact will try to format a single case on a single line. sparse
           will always break the line before a single case. The default value
           is compact.

       --space-around-collection-expressions
           Add a space inside the delimiters of collection expressions
           (lists, arrays, records).

       --type-decl={compact|sparse}
           Style of type declaration. compact will try to format constructors
           and records definition in a single line. sparse will always break
           between constructors and record fields. The default value is
           compact.

       --wrap-comments
           Wrap comments and docstrings. Comments and docstrings are divided
           into paragraphs by open lines (two or more consecutive newlines),
           and each paragraph is wrapped at the margin. Multi-line comments
           with vertically-aligned asterisks on the left margin are not
           wrapped. Consecutive comments with both left and right margin
           aligned are not wrapped either.

OPTIONS
       -c VAL, --config=VAL (absent OCAMLFORMAT env)
           Aggregate options. Options are specified as a comma-separated list
           of pairs: option=VAL,...,option=VAL.

       --disable-outside-detected-project
           Do not read .ocamlformat config files outside the current project.
           The project root of an input file is taken to be the nearest
           ancestor directory that contains a .git or .hg or dune-project
           file. If no .ocamlformat configuration file is found, formatting
           is disabled.

       -g, --debug
           Generate debugging output.

       --help[=FMT] (default=auto)
           Show this help in format FMT. The value FMT must be one of `auto',
           `pager', `groff' or `plain'. With `auto', the format is `pager` or
           `plain' whenever the TERM env var is `dumb' or undefined.

       -i, --inplace
           Format in-place, overwriting input file(s).

       --impl
           Parse file with unrecognized extension as an implementation.

       --intf
           Parse file with unrecognized extension as an interface.

       -n N, --max-iters=N
           Fail if output of formatting does not stabilize within N
           iterations. May be set in .ocamlformat. The default value is 10.

       --name=NAME
           Name of input file for use in error reporting. Defaults to the
           input file name. Some options can be specified in configuration
           files named '.ocamlformat' in the same or a parent directory of
           NAME, see documentation of other options for details. Mutually
           exclusive with --inplace.

       --no-comment-check
           UNSAFE: Control whether to check comments and documentation
           comments. May be set in .ocamlformat.

       --no-version-check
           Do no check version matches the one specified in .ocamlformat.

       -o DST, --output=DST
           Output file. Mutually exclusive with --inplace. Write to stdout if
           omitted.

       --ocp-indent-config
           Read .ocp-indent configuration files. match-clause sets
           cases-exp-indent to the same value.

       -p {default|compact|sparse|janestreet},
       --profile={default|compact|sparse|janestreet}
           Preset profiles which set all options, overriding lower priority
           configuration. default sets each option to its default value.
           compact sets options for a generally compact code style. sparse
           sets options for a generally sparse code style. janestreet is the
           profile used at JaneStreet. 

       --print-config
           Print the configuration determined by the environment variable,
           the configuration files, preset profiles and command line.
           Attributes are not considered. If many input files are specified,
           only print the configuration for the first file. If no input file
           is specified, print the configuration for the root directory if
           specified, or for the current working directory otherwise.

       -q, --quiet
           Quiet. May be set in .ocamlformat.

       --root=DIR
           Root of the project. If specified, only take into account
           .ocamlformat configuration files inside DIR and its
           subdirectories.

       --use-file
           Parse file with unrecognized extension as a use_file.

       --version
           Show version information.

       SRC Input files. At least one is required, and exactly one without
           --inplace. If - is passed, will read from stdin.

ENVIRONMENT
       These environment variables affect the execution of ocamlformat:

       OCAMLFORMAT
           See option --config.

