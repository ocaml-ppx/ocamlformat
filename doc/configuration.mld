{0 How OCamlFormat computes its configuration}

{1 Configuration files}

Ocamlformat fetches the following files on the FS:

1. [.git], [.hg] or [dune-project]
2. [.ocamlformat] and [.ocp-indent]
3. [.ocamlformat-ignore] and [.ocamlformat-enable]

(1.) files are used to determine the {b project root}, which can be overriden by the [--root] option, they are looked up from the path of the file to format, and upwards following parent directories, until the first one is found.

(2.) and (3.) are looked up from the path of the file to format, and following up the parents up to the project root.

(2.) are the {b configuration files}, they  contain the options used to configure ocamlformat.

(3.) contain a list of files to exclude from the formatting, if the formatting is enabled ([disable = false]).

(4.) contain a list of files to include in the formatting, if the formatting is disabled ([disable = true]).

{1 How the configuration is built}

+ The initial configuration is equal to the [default] (or [conventional]) profile
+ The options passed through the configuration files are applied. The configuration files are considered in sequence, starting from the root of the project, and down to the directory of the file to format, overriding one or many options at each application.
+ The options passed through the [OCAMLFORMAT] environment variable are applied, overriding one or many options at a time.
+ The options passed through the command line are applied, overriding one or many options at a time.

Note that some options can be overriden directly in the source, with attributes like:

{@ocaml[
[@ocamlformat "option=value,option=value"]
]}

But this is not part of the external configuration.
