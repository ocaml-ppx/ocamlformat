let _ =
  let f ~y = y + 1 in
  f ~y:(y : int)

let () =
  very_long_function_name
    ~very_long_argument_label:(fun
        very_long_argument_name_one
        very_long_argument_name_two
        very_long_argument_name_three
      -> ())

let () =
  very_long_function_name
    ~very_long_argument_label:(* foo *)
      (fun
        very_long_argument_name_one
        very_long_argument_name_two
        very_long_argument_name_three
      -> ())

let () =
  very_long_function_name
    ~very_long_argument_label:(fun
        very_long_argument_name_one
        very_long_argument_name_two
        very_long_argument_name_three
      -> ())
    foo

let () =
  very_long_function_name
    ~very_long_argument_label:(* foo *)
      (fun
        very_long_argument_name_one
        very_long_argument_name_two
        very_long_argument_name_three
      -> ())
    foo

let labeled_tuple () = (~x:1, ~y:(1 + 2))
let ~x, .. = labeled_tuple ()
let _ = (~x:1, ~y:(f 1))
let _ = (1 + 2, 1 + 2)
let _ = (1 + 2, ~y:(1 + 2))
let _ = (1 + 2, ~y)
let _ = (1 + 2, ~(y : t))

(* No parens *)

let _ = (x, ~y:a.b)
let _ = (x, ~y:a#.b)
let _ = (x, ~y:a#b)
