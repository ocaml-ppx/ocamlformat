let () =
  Lwt_main.run
    (let a = "a" in
     let b = "b" in
     let c = "c" in
     Lwt.return "test")
;;

let () =
  Lwt_main.run
    (let a = "a" in
     let b = "b" in
     let c = "c" in
     Lwt.return "test")
;;

let () =
  List.iter
    (fun v ->
       (* do a lot of things *)
       let a = "a" in
       let b = "b" in
       let c = "c" in
       ())
    values
;;

let () =
  List.iter
    (fun v ->
       (* do a lot of things *)
       let a = "a" in
       let b = "b" in
       let c = "c" in
       ())
    values
;;

let () =
  foooooooo
    (fooooooooooooo;
     foooooooo foooooooooooo;
     fooooooooooo foooooooooo;
     foooooooooooooooo)
;;

let () =
  foooooooo
    (fooooooooooooo;
     foooooooo foooooooooooo;
     fooooooooooo foooooooooo;
     foooooooooooooooo)
;;

let () =
  foooooooo
    (if foooooooooooooooooooooooooooo
     then
       if foooooooooooooooooooooooooooo
       then foooooooooooooooooo
       else foooooooooooooooooooooooooo
     else if foooooooooooooooooooooooooooooooo
     then
       foooooooooooooooooo
         (if foooooooooooooooooooooooooooo
          then
            if foooooooooooooooooooooooooooo
            then foooooooooooooooooooooooo
            else foooooooooooooooooooooooooo
          else if foooooooooooooooooooooooooooooooo
          then fooooooooooooooooooooooooooooooooooo
          else if foooooooooooooooooo
          then foooooooooooooooooooooooooooooooooo
          else fooooooooooooooooooooo)
     else if foooooooooooooooooo
     then foooooooooooooooooooooooooooooooooo
     else fooooooooooooooooooooo)
;;

let () =
  foooooooo
    (if foooooooooooooooooooooooooooo
     then
       if foooooooooooooooooooooooooooo
       then foooooooooooooooooooooooo
       else
         foooooooooooooooooooooooooooo
           (if foooooooooooooooooooooooooooo
            then
              if foooooooooooooooooooooooooooo
              then foooooooooooooooooooooooo
              else foooooooooooooooooooooooooo
            else if foooooooooooooooooooooooooooooooo
            then fooooooooooooooooooooooooooooooooooo
            else if foooooooooooooooooo
            then foooooooooooooooooooooooooooooooooo
            else fooooooooooooooooooooo)
     else if foooooooooooooooooooooooooooooooo
     then fooooooooooooooooooooooooooooooooooo
     else if foooooooooooooooooo
     then foooooooooooooooooooooooooooooooooo
     else fooooooooooooooooooooo)
;;

let _ =
  a
  |>
  let a = b in
  c
;;

let _ =
  (let a = b in
   c)
  |> d
;;

let _ =
  a
  := let a = b in
     c
;;

let _ =
  (let a = b in
   c)
  := d
;;

let _ =
  a
  +
  let a = b in
  c
;;

let _ =
  (let a = b in
   c)
  + d
;;

let _ =
  f
    (let a = b in
     c)
;;

let _ =
  (let a = b in
   c)
    d
;;

let _ =
  a#f
    (let a = b in
     c)
;;

let _ =
  (let a = b in
   c)
    #f
;;

let _ =
  A
    (let a = b in
     c)
;;

let _ =
  `A
    (let a = b in
     c)
;;

let _ =
  { x =
      (let a = b in
       c)
  }
;;

let _ =
  { (let a = b in
     c)
    with
    a = b
  }
;;

let _ =
  {<x = let a = b in
        c>}
;;

let _ =
  x
  <- (let a = b in
      c)
;;

let _ =
  (let a = b in
   c)
    .x
;;

let _ =
  (let a = b in
   c).x
  <- d
;;

let _ =
  ( (let a = b in
     c)
  , d )
;;

let _ =
  (let a = b in
   c
    :> t)
;;

let _ =
  let a = b in
  c :: d
;;

let _ =
  a
  ::
  (let a = b in
   c)
;;

let _ =
  [ (let a = b in
     c)
  ]
;;

let _ =
  [| (let a = b in
      c)
  |]
;;

let () = if a then b (* asd *)

[@@@ocamlformat "if-then-else=compact"]

let _ =
  if x then (
    foo.fooooo <- Fooo.foo fooo foo.fooooo;
    Fooo fooo)
  else if y then (
    f 0;
    f 2)
  else (
    foo.fooooo <- Fooo.foo fooo foo.fooooo;
    Fooo fooo)
;;

let () = if a then b (* asd *)

[@@@ocamlformat "if-then-else=fit-or-vertical"]

let _ =
  if x then (
    foo.fooooo <- Fooo.foo fooo foo.fooooo;
    Fooo fooo)
  else if y then (
    f 0;
    f 2)
  else (
    foo.fooooo <- Fooo.foo fooo foo.fooooo;
    Fooo fooo)
;;

let () =
  if a then
    b (* asd *)
;;

[@@@ocamlformat "if-then-else=keyword-first"]

let _ =
  if x
  then (
    foo.fooooo <- Fooo.foo fooo foo.fooooo;
    Fooo fooo)
  else if y
  then (
    f 0;
    f 2)
  else (
    foo.fooooo <- Fooo.foo fooo foo.fooooo;
    Fooo fooo)
;;

let () = if a then b (* asd *)

[@@@ocamlformat "if-then-else=k-r"]

let _ =
  if x then (
    foo.fooooo <- Fooo.foo fooo foo.fooooo;
    Fooo fooo
  ) else if y then (
    f 0;
    f 2
  ) else (
    foo.fooooo <- Fooo.foo fooo foo.fooooo;
    Fooo fooo
  )
;;

let _ =
  match x with
  | A ->
    (match B with
     | A -> fooooooooooooo)
  | A ->
    (match B with
     | A -> fooooooooooooo
     | B -> fooooooooooooo)
  | A ->
    (match B with
     | A -> fooooooooooooo
     | B -> fooooooooooooo
     | C -> fooooooooooooo
     | D -> fooooooooooooo)
;;

let () =
  (add_test
   @@
   let test_name = "Test 1" in
   test_name >:: fun _ -> assert_equal "a" "a");
  add_test
  @@
  let test_name = "Test 2" in
  test_name >:: fun _ -> assert_equal "b" "b"
;;

let _ = begin end
let _ = begin end (* foo *)
let _ = begin%ext end
let _ = begin%ext end (* foo *)
let _ = x y
let _ = (* foo *) x y

let _ =
  begin%ext
    x y
  end
;;

let _ =
  begin%ext
    (* foo *) x y
  end
;;

let _ =
  begin[@landmark "parse_constant_dividends"]
    market_data_items := ()
  end
;;

let () = if a then b (* asd *)

let x =
  let get_path_and_distance pv1 pv2 =
    if is_loop pv1 pv2 then
      Some ([], 0)
    else (
      match Tbl.find dist_tbl (pv1, pv2) with
      | None ->
        (* FIXME: temporary hack to avoid Jane Street's annoying warnings. *)
        begin[@warning "-3"] try
          let path', dist = Dijkstra.shortest_path pgraph pv1 pv2 in
          let path = unwrap_path path' in
          Tbl.set dist_tbl ~key:(pv1, pv2) ~data:(path, dist);
          Some (path, dist)
        with
        | Not_found | Not_found_s _ -> None
        end
      | pd -> pd
    )
  in
  ()
;;

let _ =
  if something_changed then begin[@attr]
    loop
  end
;;

let _ =
  match x with
  | _ ->
    (* xxx *)
    y
;;

let _ =
  match x with
  | _ -> begin[@foo] y end
;;

let v = map x (fun x y z -> y)
let v = map x (fun x arggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg -> y)

let v =
  map x (fun x arggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg -> y)
;;

let v =
  map x (fun x yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy z ->
    print y;
    z)
;;

let v =
  map
    x
    (fun x argggggggggggggggggggggggggggggggggg gggggggggggggggggggg ggggggggggggggg -> y)
;;

let v =
  map x (fun x yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy z ->
    print y;
    z)
;;

let v =
  map x (fun x y z ->
    ya f;
    a f b)
;;

let v =
  map x begin%ext1 fun%ext2 x y z ->
      ya f;
      a f b
    end
;;

let _ =
  lazy
    (print_endline xxxxxxxxx;
     f xxxxxxxxxx yyyyyyyyyyyyy zzzzzzzzzzzzzzzzzzzzz)
;;

let _ =
  lazy
    (fun y ->
      print_endline xxxxxxxxx;
      f xxxxxxxxxx yyyyyyyyyyyyy zzzzzzzzzzzzzzzzzzzzz)
;;

let _ =
  lazy
    (match a with
     | A -> b
     | A ->
       print_endline xxxxxxxxx;
       f xxxxxxxxxx yyyyyyyyyyyyy zzzzzzzzzzzzzzzzzzzzz)
;;

let _ =
  lazy
    (fun xxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyy zzzzzzzzzzzzzzzzzzzzzzzz ->
      print_endline xxxxxxxxx;
      f xxxxxxxxxx yyyyyyyyyyyyy zzzzzzzzzzzzzzzzzzzzz)
;;

[@@@ocamlformat "if-then-else=fit-or-vertical"]

let _ =
  if b then (
    e1;
    e2)
  else (
    something loooooooooooooooooooooooooooooooong enough to_trigger a break;
    this is more)
;;

let _ =
  if b then (
    something loooooooooooooooooooooooooooooooong enough to_trigger a break;
    this is more)
  else if b1 then (
    something loooooooooooooooooooooooooooooooong enough to_trigger a break;
    this is more)
  else
    e
;;

f
  (if loooooooooooooooooooooooooooooooooooooooooooooooooooooooooong then
     ()
   else
     ())
;;

f
  (if loooooooooooooooooooooooooooooooooooooooooooooooooooooooooonger then
     ()
   else
     ())
;;

f
  (if even loooooooooooooooooooooooooooooooooooooooooooooooooooooooooonger then
     ()
   else
     ())
;;

f
  (if and_ even loooooooooooooooooooooooooooooooooooooooooooooooooooooooooonger then
     ()
   else
     ())
;;

let () =
  f
    (if a___________________________________________________________________ then
       b_________________________________________________________________
     else
       c_________________________________________________________________)
;;

let _ =
  f
    ~aaaaaaaaaaaaaaaaaaaaaaaaaa
    ~bbbbbbbbbbbbbbbbbbbbbbb
    ~ccccccccccccccccccccc
    ~label:(fun x ->
      function_ body;
      force breakkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk;
      return value)
    ~last
    ~args
;;

let _ =
  f
    ~aaaaaaaaaaaaaaaaaaaaaaaaaa
    ~bbbbbbbbbbbbbbbbbbbbbbb
    ~ccccccccccccccccccccc
    ~label:
      (fun
        x aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ->
      function_ body;
      force breakkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk;
      return value)
    ~last
    ~args
;;

let _ =
  f
    ~aaaaaaaaaaaaaaaaaaaaaaaaaa
    ~bbbbbbbbbbbbbbbbbbbbbbb
    ~ccccccccccccccccccccc
    ~label:
      (match
         x aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
       with
       | A -> aaaaaaaaaaaa
       | B -> bbbbbbbbbbbbbbbbb b bbbbbbbbbbbbbbbbb
       | C -> c cccccccccccccccccc cccccccccccccccccccccccccccccc)
    ~last
    ~args
;;

let _ =
  f
    ~aaaaaaaaaaaaaaaaaaaaaaaaaa
    ~bbbbbbbbbbbbbbbbbbbbbbb
    ~ccccccccccccccccccccc
    ~label:
      (function_ body;
       force breakkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk;
       return value)
    ~last
    ~args
;;

let _ =
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  |>>>>> fun xxxxxxx ->
  xxxxxxxxxxxxxxxxxxxxxxx;
  aaaaaaaaaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaaaaaa
;;

let _ =
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  |>>>>>
  match xxxxxxx with
  | A -> xxxxxxxxxxxxxxxxxxxxxxx
  | B -> aaaaaaaaaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaaaaaa
;;

let _ =
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  |>>>>>
  (xxxxxxxxxxxxxxxxxxxxxxx;
   aaaaaaaaaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaaaaaa)
;;

let main =
  Lwt.run
  @@
  match a with
  | A -> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  | B -> bbbbbbbbbbbbbbbbbbbbbb
;;

let main =
  Lwt.run
  @@
  match%lwt a with
  | A -> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  | B -> bbbbbbbbbbbbbbbbbbbbbb
;;

let _ =
  begin
    a
  end
  [@a]
;;

let () =
  fooooo
  |>>>>> List.iter (fun a ->
    let x = some_really_really_really_long_name_that_doesn't_fit_on_the_line $ y in
    fooooooooooo x)
;;

let () =
  fooooo
  |>>>>> List.iter (fun aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ->
    let x = some_really_really_really_long_name_that_doesn't_fit_on_the_line $ y in
    fooooooooooo x)
;;

let () =
  fooooo
  |>>>>> List.iter (fun a ->
    let x = some_really_really_really_long_name_that_doesn't_fit_on_the_line $ y in
    fooooooooooo x)
;;

let () =
  fooooo
  |>>>>> List.iter
           aaaaaaaaaaaa
           aaaaaaaaaaaaaaaaaaaaa
           aaaaaaaaaaaaaaa
           aaaaaaaaaaaaaa
           (fun
               aaaaaaaaaaaaaaaaaaaaaaaaaaa aa aaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaa ->
              let x =
                some_really_really_really_long_name_that_doesn't_fit_on_the_line $ y
              in
              fooooooooooo x)
;;
