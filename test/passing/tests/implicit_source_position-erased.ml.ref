(* This file is the test case for erasing "implicit source position"
   arguments.

   The test output for this file can be found in
   [implicit_source_position_erased.ml.ref]. The options for this test can be
   found in [implicit_source_position_erased.ml.opts]. *)
let punned_pattern ?(call_pos = Stdlib.Lexing.dummy_pos) () = call_pos

let ignored_pattern ?call_pos:(_ = Stdlib.Lexing.dummy_pos) () = 1

let destructured_pattern ?call_pos:({pos_fname; _} = Stdlib.Lexing.dummy_pos)
    () =
  ()

let in_a_type : ?call_pos:Stdlib.Lexing.position -> unit -> Lexing.position =
  punned_pattern

let in_an_expression = Stdlib.Lexing.dummy_pos

let with_locals ?(call_pos = Stdlib.Lexing.dummy_pos) () = ()

type 'a t = ?here:Stdlib.Lexing.position -> 'a

let f (x : ?here:Stdlib.Lexing.position -> _)
    ~(y : ?here:Stdlib.Lexing.position -> _)
    ?(z : ?here:Stdlib.Lexing.position -> _) =
  ()
