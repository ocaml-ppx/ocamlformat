(* bindings *)

module M : sig
  type t
end @ m =
  M

module M : S @ m = M

module M @ m = M

module M : sig
  type t
end @ m =
  M
[@@a]

module M : S @ m = M [@@a]

module M @ m = M [@@a]

module [@a] M : sig
  type t
end @ m =
  M

module [@a] M : S @ m = M

module [@a] M @ m = M

(* expressions *)

let () =
  let module M : sig
    type t
  end @ m =
    M
  in
  ()

let () =
  let module M : S @ m = M in
  ()

let () =
  let module M @ m = M in
  ()

(* test comment preservation *)

module M : (* 02 *) sig
  (* 03 *)
  type t
end (* 04 *) @ (* 05 *) m (* 06 *) =
  (* 01 *)

  (* 07 *)
  M
(* 08 *)

module M : (* 10 *) S (* 11 *) @ (* 12 *) m (* 13 *) =
  (* 09 *)
  (* 14 *)
  M
(* 15 *)

module M @ (* 17 *) m (* 18 *) =
  (* 16 *)
  (* 19 *)
  M
(* 20 *)

let () =
  let module (* 21 *) M : (* 23 *) sig
    (* 24 *)
    type t
  end (* 25 *)

      (* 29 *) @ (* 26 *) m (* 27 *) =
    (* 22 *)

    (* 28 *)
    M
  in
  ()

let () =
  let module (* 30 *) M : (* 32 *) S (* 33 *)

                                     (* 37 *) @ (* 34 *) m (* 35 *) =
    (* 31 *)
    (* 36 *)
    M
  in
  ()

let () =
  let module (* 38 *) M @ (* 40 *) m (* 41 *) =
    (* 39 *)
    (* 42 *)
    M
    (* 43 *)
  in
  ()
