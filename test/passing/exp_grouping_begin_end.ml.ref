let () =
  Lwt_main.run
    begin
      let a = "a" in
      let b = "b" in
      let c = "c" in
      Lwt.return "test"
    end

let () =
  Lwt_main.run
    begin
      let a = "a" in
      let b = "b" in
      let c = "c" in
      Lwt.return "test"
    end

let () =
  List.iter
    (fun v ->
      (* do a lot of things *)
      let a = "a" in
      let b = "b" in
      let c = "c" in
      ())
    values

let () =
  List.iter
    (fun v ->
      (* do a lot of things *)
      let a = "a" in
      let b = "b" in
      let c = "c" in
      ())
    values

let () =
  foooooooo
    begin
      fooooooooooooo ;
      foooooooo foooooooooooo ;
      fooooooooooo foooooooooo ;
      foooooooooooooooo
    end

let () =
  foooooooo
    begin
      fooooooooooooo ;
      foooooooo foooooooooooo ;
      fooooooooooo foooooooooo ;
      foooooooooooooooo
    end

let () =
  foooooooo
    begin
      if foooooooooooooooooooooooooooo then
      if foooooooooooooooooooooooooooo then foooooooooooooooooo
        else foooooooooooooooooooooooooo
      else if foooooooooooooooooooooooooooooooo then
        foooooooooooooooooo
          begin
            if foooooooooooooooooooooooooooo then
            if foooooooooooooooooooooooooooo then foooooooooooooooooooooooo
              else foooooooooooooooooooooooooo
            else if foooooooooooooooooooooooooooooooo then
              fooooooooooooooooooooooooooooooooooo
            else if foooooooooooooooooo then
              foooooooooooooooooooooooooooooooooo
            else fooooooooooooooooooooo
          end
      else if foooooooooooooooooo then foooooooooooooooooooooooooooooooooo
      else fooooooooooooooooooooo
    end

let () =
  foooooooo
    begin
      if foooooooooooooooooooooooooooo then
      if foooooooooooooooooooooooooooo then foooooooooooooooooooooooo
        else
          foooooooooooooooooooooooooooo
            begin
              if foooooooooooooooooooooooooooo then
              if foooooooooooooooooooooooooooo then
                foooooooooooooooooooooooo
                else foooooooooooooooooooooooooo
              else if foooooooooooooooooooooooooooooooo then
                fooooooooooooooooooooooooooooooooooo
              else if foooooooooooooooooo then
                foooooooooooooooooooooooooooooooooo
              else fooooooooooooooooooooo
            end
      else if foooooooooooooooooooooooooooooooo then
        fooooooooooooooooooooooooooooooooooo
      else if foooooooooooooooooo then foooooooooooooooooooooooooooooooooo
      else fooooooooooooooooooooo
    end

let _ =
  a
  |>
  let a = b in
  c

let _ =
  begin
    let a = b in
    c
  end
  |> d

let _ =
  a :=
    let a = b in
    c

let _ =
  begin
    let a = b in
    c
  end
  := d

let _ =
  a
  +
  let a = b in
  c

let _ =
  begin
    let a = b in
    c
  end
  + d

let _ =
  f
    begin
      let a = b in
      c
    end

let _ =
  begin
    let a = b in
    c
  end
    d

let _ =
  a#f
    begin
      let a = b in
      c
    end

let _ =
  begin
    let a = b in
    c
  end
    #f

let _ =
  A
    begin
      let a = b in
      c
    end

let _ =
  `A
    begin
      let a = b in
      c
    end

let _ =
  { x=
      begin
        let a = b in
        c
      end }

let _ =
  { begin
      let a = b in
      c
    end
    with
    a= b }

let _ =
  {< x = let a = b in
         c >}

let _ =
  x <-
      begin
        let a = b in
        c
      end

let _ =
  begin
    let a = b in
    c
  end
    .x

let _ =
  begin
    let a = b in
    c
  end.x <-
      d

let _ =
  ( begin
      let a = b in
      c
    end
  , d )

let _ =
  ( let a = b in
    c
    :> t )

let _ =
  let a = b in
  c :: d

let _ =
  a
  ::
  begin
    let a = b in
    c
  end

let _ =
  [ begin
      let a = b in
      c
    end ]

let _ =
  [| begin
       let a = b in
       c
     end |]
