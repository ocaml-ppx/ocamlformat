name: Build mingw64 binary

on:
  release:
    types: [released]
  workflow_dispatch:
    inputs:
      ref:
        required: true
        default: 'main'

env:
  CYGWINSETUP: setup-x86_64.exe
  PACKAGES: git,m4,patchutils,make,curl,unzip,mingw64-x86_64-binutils,mingw64-x86_64-gcc-core,mingw64-x86_64-headers,mingw64-x86_64-runtime
  SITE: https://mirrors.kernel.org/sourceware/cygwin

jobs:
  build:
    runs-on: windows-latest
    env:
      SHELLOPTS: igncr
    steps:
      - name: Set Build Ref for Release Builds
        if: github.event_name == 'release'
        run: |
          "build_ref=${{ github.ref }}" >> $env:GITHUB_ENV
      - name: Set Build Ref for Manual Builds
        if: github.event_name == 'workflow_dispatch'
        run: |
          "build_ref=${{ github.event.inputs.ref }}" >> $env:GITHUB_ENV
      - name: Disable Git EOL Conversion
        run: |
          git config --global core.autocrlf false
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.build_ref }}
      - name: Download Cygwin Installer
        run: |
          curl.exe -o C:\${{ env.CYGWINSETUP }} https://www.cygwin.com/${{ env.CYGWINSETUP }}
        shell: cmd
      - name: Setup Cygwin
        run: |
          C:\${{ env.CYGWINSETUP }} -A -q -D -L -g -o -s ${{ env.SITE }} -l C:\cygwin64-cache -R C:\cygwin64 -C Base -P ${{ env.PACKAGES }}
        shell: cmd
      - name: Run Build Script
        run: |
          cd '${{ github.workspace }}'
          git config --global --add safe.directory "$(pwd)"
          bash tools/build-mingw64.sh
          echo "artifact_name=ocamlformat-$(basename ${{ env.build_ref }}).exe" >> $GITHUB_ENV
        shell: C:\cygwin64\bin\bash.exe --login --norc '{0}'
      - name: Rename Artifact
        run: |
          Copy-Item ${{ github.workspace }}\_build\install\default\bin\ocamlformat.exe -Destination .\${{ env.artifact_name }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.artifact_name }}
          if-no-files-found: error
      - name: Upload Release Asset
        if: github.event_name == 'release'
        run: >
          curl.exe
          --data-binary '@${{ env.artifact_name }}'
          -X POST
          -H "Content-Type: application/octet-stream"
          -H "Accept: application/vnd.github+json"
          -H "Authorization: Bearer ${{ github.token }}"
          "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}/assets?name=${{ env.artifact_name }}"
