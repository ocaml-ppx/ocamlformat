--- parser-upstream/format.ml
+++ ocamlformat_support/format.ml
@@@@
   | Pp_tbegin of tbox          (* beginning of a tabulation box *)
   | Pp_tend                    (* end of a tabulation box *)
   | Pp_newline                 (* to force a newline inside a box *)
   | Pp_if_newline              (* to do something only if this very
                                   line has been broken *)
+  | Pp_string_if_newline of string
+                               (* print a string only if this very
+                                  line has been broken *)
+  | Pp_or_newline of int * int * string * string
+                               (* print a break and the first string if this
+                                  very line has not been broken, otherwise
+                                  print the second string *)
+  | Pp_fits_or_breaks of int * string * int * int * string
+                               (* print a string if the enclosing box fits,
+                                  otherwise print a break and a string *)
   | Pp_open_tag of stag         (* opening a tag name *)
   | Pp_close_tag               (* closing the most recently open tag *)
 
 and stag = ..
 
@@@@
 
   The main pretty printing functions.
 
 *)
 
+let format_pp_break state size fits breaks =
+  let before, off, _ = breaks in
+  begin match Stack.top_opt state.pp_format_stack with
+  | None -> () (* No open box. *)
+  | Some { box_type; width } ->
+    begin match box_type with
+    | Pp_hovbox ->
+      if size + String.length before > state.pp_space_left
+      then break_new_line state breaks width
+      else break_same_line state fits
+    | Pp_box ->
+      (* Have the line just been broken here ? *)
+      if state.pp_is_new_line then break_same_line state fits else
+      if size + String.length before > state.pp_space_left
+      then break_new_line state breaks width else
+      (* break the line here leads to new indentation ? *)
+      if state.pp_current_indent > state.pp_margin - width + off
+      then break_new_line state breaks width
+      else break_same_line state fits
+    | Pp_hvbox -> break_new_line state breaks width
+    | Pp_fits -> break_same_line state fits
+    | Pp_vbox -> break_new_line state breaks width
+    | Pp_hbox -> break_same_line state fits
+    end
+  end
+
+
 (* Formatting a token with a given size. *)
 let format_pp_token state size = function
 
   | Pp_text s ->
     format_pp_text state size s
@@@@
 
   | Pp_if_newline ->
     if state.pp_current_indent != state.pp_margin - state.pp_space_left
     then pp_skip_token state
 
+  | Pp_string_if_newline s ->
+    if state.pp_is_new_line
+    then format_string state s
+
   | Pp_break { fits; breaks } ->
-    let before, off, _ = breaks in
-    begin match Stack.top_opt state.pp_format_stack with
-    | None -> () (* No open box. *)
-    | Some { box_type; width } ->
-      begin match box_type with
-      | Pp_hovbox ->
-        if size + String.length before > state.pp_space_left
-        then break_new_line state breaks width
-        else break_same_line state fits
-      | Pp_box ->
-        (* Have the line just been broken here ? *)
-        if state.pp_is_new_line then break_same_line state fits else
-        if size + String.length before > state.pp_space_left
-          then break_new_line state breaks width else
-        (* break the line here leads to new indentation ? *)
-        if state.pp_current_indent > state.pp_margin - width + off
-        then break_new_line state breaks width
-        else break_same_line state fits
-      | Pp_hvbox -> break_new_line state breaks width
-      | Pp_fits -> break_same_line state fits
-      | Pp_vbox -> break_new_line state breaks width
-      | Pp_hbox -> break_same_line state fits
-      end
-    end
+    format_pp_break state size fits breaks
+
+
+  | Pp_or_newline (n, off, fits, breaks) ->
+    if state.pp_is_new_line
+    then format_string state breaks
+    else format_pp_break state size ("", n, fits) ("", off, breaks)
+
+  | Pp_fits_or_breaks (level, fits, n, off, breaks) ->
+     let check_level level { box_type= ty; width } =
+       if level < 0 then level
+       else if ty = Pp_fits then
+         begin
+           if level = 0 then format_string state fits ;
+           level - 1
+         end
+       else
+         begin
+           if off > min_int then
+             begin
+               if size + n + String.length breaks >= state.pp_space_left
+               then break_new_line state ("", off, "") width
+               else break_same_line state ("", n, "")
+             end;
+           format_string state breaks;
+           - 1
+         end
+     in
+     ignore (Stack.fold check_level level state.pp_format_stack)
 
    | Pp_open_tag tag_name ->
      let marker = state.pp_mark_open_tag tag_name in
      pp_output_string state marker;
      Stack.push tag_name state.pp_mark_stack
@@@@
     (* test if scan stack contains any data that is not obsolete. *)
     if left_total < state.pp_left_total then
       initialize_scan_stack state.pp_scan_stack
     else
       match queue_elem.token with
-      | Pp_break _ | Pp_tbreak (_, _) ->
+      | Pp_break _ | Pp_tbreak (_, _)
+      | Pp_or_newline _ | Pp_fits_or_breaks _ ->
         if ty then begin
           queue_elem.size <- Size.of_int (state.pp_right_total + size);
           Stack.pop_opt state.pp_scan_stack |> ignore
         end
       | Pp_begin (_, _) ->
         if not ty then begin
           queue_elem.size <- Size.of_int (state.pp_right_total + size);
           Stack.pop_opt state.pp_scan_stack |> ignore
         end
       | Pp_text _ | Pp_stab | Pp_tbegin _ | Pp_tend | Pp_end
-      | Pp_newline | Pp_if_newline | Pp_open_tag _ | Pp_close_tag ->
+      | Pp_newline | Pp_if_newline | Pp_string_if_newline _
+      | Pp_open_tag _ | Pp_close_tag ->
         () (* scan_push is only used for breaks and boxes. *)
 
 
 (* Push a token on pretty-printer scanning stack.
    If b is true set_size is called. *)
@@@@
     match Stack.pop_opt state.pp_tag_stack with
     | None -> () (* No more tag to close. *)
     | Some tag_name ->
       state.pp_print_close_tag tag_name
 
+let pp_open_tag state s = pp_open_stag state (String_tag s)
+let pp_close_tag state () = pp_close_stag state ()
+
 let pp_set_print_tags state b = state.pp_print_tags <- b
 let pp_set_mark_tags state b = state.pp_mark_tags <- b
 let pp_get_print_tags state () = state.pp_print_tags
 let pp_get_mark_tags state () = state.pp_mark_tags
 let pp_set_tags state b =
@@@@
   state.pp_curr_depth <- 0;
   state.pp_space_left <- state.pp_margin;
   pp_open_sys_box state
 
 let clear_tag_stack state =
-  Stack.iter (fun _ -> pp_close_stag state ()) state.pp_tag_stack
+  Stack.iter (fun _ -> pp_close_tag state ()) state.pp_tag_stack
 
 
 (* Flushing pretty-printer queue. *)
 let pp_flush_queue state b =
   clear_tag_stack state;
@@@@
     let token = Pp_break { fits; breaks } in
     let length = String.length before + width + String.length after in
     let elem = { size; token; length } in
     scan_push state true elem
 
+(* To format a string, only in case the line has just been broken. *)
+let pp_print_string_if_newline state s =
+  if state.pp_curr_depth < state.pp_max_boxes then
+    let length = String.length s in
+    let size = Size.zero in
+    let token = Pp_string_if_newline s in
+    enqueue_advance state { size; token; length }
+
+
 (* Printing break hints:
    A break hint indicates where a box may be broken.
    If line is broken then offset is added to the indentation of the current
    box else (the value of) width blanks are printed. *)
 let pp_print_break state width offset =
   pp_print_custom_break state
     ~fits:("", width, "") ~breaks:("", offset, "")
 
 
+(* To format a break and the first string, only in case the line has not just
+   been broken, or the second string, in case the line has just been broken. *)
+let pp_print_or_newline state width offset fits breaks =
+  if state.pp_curr_depth < state.pp_max_boxes then
+    let size = Size.of_int (- state.pp_right_total) in
+    let token = Pp_or_newline (width, offset, fits, breaks) in
+    let width = width + String.length fits in
+    scan_push state true { size; token; length= width }
+
+
+(* To format a string if the enclosing box fits, and otherwise to format a
+   break and a string. *)
+let pp_print_fits_or_breaks state ?(level = 0) fits nspaces offset breaks =
+  if state.pp_curr_depth < state.pp_max_boxes then
+    let size = Size.of_int (- state.pp_right_total) in
+    let token = Pp_fits_or_breaks (level, fits, nspaces, offset, breaks) in
+    let length = String.length fits in
+    scan_push state true { size; token; length }
+
+
 (* Print a space :
    a space is a break hint that prints a single space if the break does not
    split the line;
    a cut is a break hint that prints nothing if the break does not split the
    line. *)
@@@@
    to [Stdlib.stdout], [Stdlib.stderr], and {!stdbuf}. *)
 let std_formatter = formatter_of_out_channel Stdlib.stdout
 and err_formatter = formatter_of_out_channel Stdlib.stderr
 and str_formatter = formatter_of_buffer stdbuf
 
-(* Initialise domain local state *)
-module DLS = Domain.DLS
-
-let stdbuf_key = DLS.new_key pp_make_buffer
-let _ = DLS.set stdbuf_key stdbuf
-
-let str_formatter_key = DLS.new_key (fun () ->
-  formatter_of_buffer (DLS.get stdbuf_key))
-let _ = DLS.set str_formatter_key str_formatter
-
-let buffered_out_string key str ofs len =
-  Buffer.add_substring (Domain.DLS.get key) str ofs len
-
-let buffered_out_flush oc key () =
-  let buf = Domain.DLS.get key in
-  let len = Buffer.length buf in
-  let str = Buffer.contents buf in
-  output_substring oc str 0 len ;
-  Stdlib.flush oc;
-  Buffer.clear buf
-
-let std_buf_key = Domain.DLS.new_key (fun () -> Buffer.create pp_buffer_size)
-let err_buf_key = Domain.DLS.new_key (fun () -> Buffer.create pp_buffer_size)
-
-let std_formatter_key = DLS.new_key (fun () ->
-  let ppf =
-    pp_make_formatter (buffered_out_string std_buf_key)
-      (buffered_out_flush Stdlib.stdout std_buf_key) ignore ignore ignore
-  in
-  ppf.pp_out_newline <- display_newline ppf;
-  ppf.pp_out_spaces <- display_blanks ppf;
-  ppf.pp_out_indent <- display_indent ppf;
-  ppf)
-let _ = DLS.set std_formatter_key std_formatter
-
-let err_formatter_key = DLS.new_key (fun () ->
-  let ppf =
-    pp_make_formatter (buffered_out_string err_buf_key)
-      (buffered_out_flush Stdlib.stderr err_buf_key) ignore ignore ignore
-  in
-  ppf.pp_out_newline <- display_newline ppf;
-  ppf.pp_out_spaces <- display_blanks ppf;
-  ppf.pp_out_indent <- display_indent ppf;
-  ppf)
-let _ = DLS.set err_formatter_key err_formatter
-
-let get_std_formatter () = DLS.get std_formatter_key
-let get_err_formatter () = DLS.get err_formatter_key
-let get_str_formatter () = DLS.get str_formatter_key
-let get_stdbuf () = DLS.get stdbuf_key
 
 (* [flush_buffer_formatter buf ppf] flushes formatter [ppf],
    then returns the contents of buffer [buf] that is reset.
    Formatter [ppf] is supposed to print to buffer [buf], otherwise this
    function is not really useful. *)
@@@@
   pp_flush_queue ppf false;
   let s = Buffer.contents buf in
   Buffer.reset buf;
   s
 
-(* Flush [str_formatter] and get the contents of [stdbuf]. *)
-let flush_str_formatter () =
-  let stdbuf = DLS.get stdbuf_key in
-  let str_formatter = DLS.get str_formatter_key in
-  flush_buffer_formatter stdbuf str_formatter
-
-let make_synchronized_formatter output flush =
-  DLS.new_key (fun () ->
-    let buf = Buffer.create pp_buffer_size in
-    let output' = Buffer.add_substring buf in
-    let flush' () =
-      output (Buffer.contents buf) 0 (Buffer.length buf);
-      Buffer.clear buf;
-      flush ()
-    in
-    make_formatter output' flush')
 
-let synchronized_formatter_of_out_channel oc =
-  make_synchronized_formatter (output_substring oc) (fun () -> flush oc)
+(* Flush [str_formatter] and get the contents of [stdbuf]. *)
+let flush_str_formatter () = flush_buffer_formatter stdbuf str_formatter
 
 (*
   Symbolic pretty-printing
 *)
 
@@@@
   Basic functions on the 'standard' formatter
   (the formatter that prints to [Stdlib.stdout]).
 
 *)
 
-let open_hbox v = pp_open_hbox (DLS.get std_formatter_key) v
-and open_vbox v = pp_open_vbox (DLS.get std_formatter_key) v
-and open_hvbox v = pp_open_hvbox (DLS.get std_formatter_key) v
-and open_hovbox v = pp_open_hovbox (DLS.get std_formatter_key) v
-and open_box v = pp_open_box (DLS.get std_formatter_key) v
-and close_box v = pp_close_box (DLS.get std_formatter_key) v
-and open_stag v = pp_open_stag (DLS.get std_formatter_key) v
-and close_stag v = pp_close_stag (DLS.get std_formatter_key) v
-and print_as v w = pp_print_as (DLS.get std_formatter_key) v w
-and print_string v = pp_print_string (DLS.get std_formatter_key) v
-and print_bytes v = pp_print_bytes (DLS.get std_formatter_key) v
-and print_int v = pp_print_int (DLS.get std_formatter_key) v
-and print_float v = pp_print_float (DLS.get std_formatter_key) v
-and print_char v = pp_print_char (DLS.get std_formatter_key) v
-and print_bool v = pp_print_bool (DLS.get std_formatter_key) v
-and print_break v w = pp_print_break (DLS.get std_formatter_key) v w
-and print_cut v = pp_print_cut (DLS.get std_formatter_key) v
-and print_space v = pp_print_space (DLS.get std_formatter_key) v
-and force_newline v = pp_force_newline (DLS.get std_formatter_key) v
-and print_flush v = pp_print_flush (DLS.get std_formatter_key) v
-and print_newline v = pp_print_newline (DLS.get std_formatter_key) v
-and print_if_newline v = pp_print_if_newline (DLS.get std_formatter_key) v
-
-and open_tbox v = pp_open_tbox (DLS.get std_formatter_key) v
-and close_tbox v = pp_close_tbox (DLS.get std_formatter_key) v
-and print_tbreak v w = pp_print_tbreak (DLS.get std_formatter_key) v w
-
-and set_tab v = pp_set_tab (DLS.get std_formatter_key) v
-and print_tab v = pp_print_tab (DLS.get std_formatter_key) v
-
-and set_margin v = pp_set_margin (DLS.get std_formatter_key) v
-and get_margin v = pp_get_margin (DLS.get std_formatter_key) v
-
-and set_max_indent v = pp_set_max_indent (DLS.get std_formatter_key) v
-and get_max_indent v = pp_get_max_indent (DLS.get std_formatter_key) v
-
-and set_geometry ~max_indent ~margin =
-  pp_set_geometry (DLS.get std_formatter_key) ~max_indent ~margin
-and safe_set_geometry ~max_indent ~margin =
-  pp_safe_set_geometry (DLS.get std_formatter_key) ~max_indent ~margin
-and get_geometry v = pp_get_geometry (DLS.get std_formatter_key) v
-and update_geometry v = pp_update_geometry (DLS.get std_formatter_key) v
-
-and set_max_boxes v = pp_set_max_boxes (DLS.get std_formatter_key) v
-and get_max_boxes v = pp_get_max_boxes (DLS.get std_formatter_key) v
-and over_max_boxes v = pp_over_max_boxes (DLS.get std_formatter_key) v
-
-and set_ellipsis_text v = pp_set_ellipsis_text (DLS.get std_formatter_key) v
-and get_ellipsis_text v = pp_get_ellipsis_text (DLS.get std_formatter_key) v
-
-and set_formatter_out_channel v =
-  pp_set_formatter_out_channel (DLS.get std_formatter_key) v
-
-and set_formatter_out_functions v =
-  pp_set_formatter_out_functions (DLS.get std_formatter_key) v
-and get_formatter_out_functions v =
-  pp_get_formatter_out_functions (DLS.get std_formatter_key) v
-
-and set_formatter_output_functions v w =
-  pp_set_formatter_output_functions (DLS.get std_formatter_key) v w
-and get_formatter_output_functions v =
-  pp_get_formatter_output_functions (DLS.get std_formatter_key) v
-
-and set_formatter_stag_functions v =
-  pp_set_formatter_stag_functions (DLS.get std_formatter_key) v
-and get_formatter_stag_functions v =
-  pp_get_formatter_stag_functions (DLS.get std_formatter_key) v
-and set_print_tags v =
-  pp_set_print_tags (DLS.get std_formatter_key) v
-and get_print_tags v =
-  pp_get_print_tags (DLS.get std_formatter_key) v
-and set_mark_tags v =
-  pp_set_mark_tags (DLS.get std_formatter_key) v
-and get_mark_tags v =
-  pp_get_mark_tags (DLS.get std_formatter_key) v
-and set_tags v =
-  pp_set_tags (DLS.get std_formatter_key) v
+let open_hbox = pp_open_hbox std_formatter
+and open_vbox = pp_open_vbox std_formatter
+and open_hvbox = pp_open_hvbox std_formatter
+and open_hovbox = pp_open_hovbox std_formatter
+and open_box = pp_open_box std_formatter
+and close_box = pp_close_box std_formatter
+and open_tag = pp_open_tag std_formatter
+and close_tag = pp_close_tag std_formatter
+and open_stag = pp_open_stag std_formatter
+and close_stag = pp_close_stag std_formatter
+and print_as = pp_print_as std_formatter
+and print_string = pp_print_string std_formatter
+and print_bytes = pp_print_bytes std_formatter
+and print_int = pp_print_int std_formatter
+and print_float = pp_print_float std_formatter
+and print_char = pp_print_char std_formatter
+and print_bool = pp_print_bool std_formatter
+and print_break = pp_print_break std_formatter
+and print_cut = pp_print_cut std_formatter
+and print_space = pp_print_space std_formatter
+and force_newline = pp_force_newline std_formatter
+and print_flush = pp_print_flush std_formatter
+and print_newline = pp_print_newline std_formatter
+and print_if_newline = pp_print_if_newline std_formatter
+
+and open_tbox = pp_open_tbox std_formatter
+and close_tbox = pp_close_tbox std_formatter
+and print_tbreak = pp_print_tbreak std_formatter
+
+and set_tab = pp_set_tab std_formatter
+and print_tab = pp_print_tab std_formatter
+
+and set_margin = pp_set_margin std_formatter
+and get_margin = pp_get_margin std_formatter
+
+and set_max_indent = pp_set_max_indent std_formatter
+and get_max_indent = pp_get_max_indent std_formatter
+
+and set_geometry = pp_set_geometry std_formatter
+and safe_set_geometry = pp_safe_set_geometry std_formatter
+and get_geometry = pp_get_geometry std_formatter
+and update_geometry = pp_update_geometry std_formatter
+
+and set_max_boxes = pp_set_max_boxes std_formatter
+and get_max_boxes = pp_get_max_boxes std_formatter
+and over_max_boxes = pp_over_max_boxes std_formatter
+
+and set_ellipsis_text = pp_set_ellipsis_text std_formatter
+and get_ellipsis_text = pp_get_ellipsis_text std_formatter
+
+and set_formatter_out_channel =
+  pp_set_formatter_out_channel std_formatter
+
+and set_formatter_out_functions =
+  pp_set_formatter_out_functions std_formatter
+and get_formatter_out_functions =
+  pp_get_formatter_out_functions std_formatter
+
+and set_formatter_output_functions =
+  pp_set_formatter_output_functions std_formatter
+and get_formatter_output_functions =
+  pp_get_formatter_output_functions std_formatter
+
+and set_formatter_stag_functions =
+  pp_set_formatter_stag_functions std_formatter
+and get_formatter_stag_functions =
+  pp_get_formatter_stag_functions std_formatter
+and set_print_tags =
+  pp_set_print_tags std_formatter
+and get_print_tags =
+  pp_get_print_tags std_formatter
+and set_mark_tags =
+  pp_set_mark_tags std_formatter
+and get_mark_tags =
+  pp_get_mark_tags std_formatter
+and set_tags =
+  pp_set_tags std_formatter
 
 
 (* Convenience functions *)
 
 (* To format a list *)
@@@@
 open CamlinternalFormat
 
 (* Interpret a formatting entity on a formatter. *)
 let output_formatting_lit ppf fmting_lit = match fmting_lit with
   | Close_box                 -> pp_close_box ppf ()
-  | Close_tag                 -> pp_close_stag ppf ()
+  | Close_tag                 -> pp_close_tag ppf ()
   | Break (_, width, offset)  -> pp_print_break ppf width offset
   | FFlush                    -> pp_print_flush ppf ()
   | Force_newline             -> pp_force_newline ppf ()
   | Flush_newline             -> pp_print_newline ppf ()
   | Magic_size (_, _)         -> ()
@@@@
 
 let ifprintf _ppf (Format (fmt, _)) =
   make_iprintf ignore () fmt
 
 let fprintf ppf = kfprintf ignore ppf
-
-let printf (Format (fmt, _)) =
-  make_printf
-    (fun acc -> output_acc (DLS.get std_formatter_key) acc)
-    End_of_acc fmt
-
-let eprintf (Format (fmt, _)) =
-  make_printf
-    (fun acc -> output_acc (DLS.get err_formatter_key) acc)
-    End_of_acc fmt
+let printf fmt = fprintf std_formatter fmt
+let eprintf fmt = fprintf err_formatter fmt
 
 let kdprintf k (Format (fmt, _)) =
   make_printf
     (fun acc -> k (fun ppf -> output_acc ppf acc))
     End_of_acc fmt
@@@@
 let asprintf fmt = kasprintf id fmt
 
 (* Flushing standard formatters at end of execution. *)
 
 let flush_standard_formatters () =
-  pp_print_flush (DLS.get std_formatter_key) ();
-  pp_print_flush (DLS.get err_formatter_key) ()
+  pp_print_flush std_formatter ();
+  pp_print_flush err_formatter ()
 
 let () = at_exit flush_standard_formatters
 
-let () = Domain.before_first_spawn (fun () ->
-  flush_standard_formatters ();
+(*
 
-  let fs = pp_get_formatter_out_functions std_formatter () in
-  pp_set_formatter_out_functions std_formatter
-    {fs with out_string = buffered_out_string std_buf_key;
-             out_flush = buffered_out_flush Stdlib.stdout std_buf_key};
+  Deprecated stuff.
+
+*)
+
+(* Deprecated : subsumed by pp_set_formatter_out_functions *)
+let pp_set_all_formatter_output_functions state
+    ~out:f ~flush:g ~newline:h ~spaces:i =
+  pp_set_formatter_output_functions state f g;
+  state.pp_out_newline <- h;
+  state.pp_out_spaces <- i
+
+(* Deprecated : subsumed by pp_get_formatter_out_functions *)
+let pp_get_all_formatter_output_functions state () =
+  (state.pp_out_string, state.pp_out_flush,
+   state.pp_out_newline, state.pp_out_spaces)
+
+
+(* Deprecated : subsumed by set_formatter_out_functions *)
+let set_all_formatter_output_functions =
+  pp_set_all_formatter_output_functions std_formatter
+
+
+(* Deprecated : subsumed by get_formatter_out_functions *)
+let get_all_formatter_output_functions =
+  pp_get_all_formatter_output_functions std_formatter
+
+
+(* Deprecated : error prone function, do not use it.
+   This function is neither compositional nor incremental, since it flushes
+   the pretty-printer queue at each call.
+   To get the same functionality, define a formatter of your own writing to
+   the buffer argument, as in
+   let ppf = formatter_of_buffer b
+   then use {!fprintf ppf} as usual. *)
+let bprintf b (Format (fmt, _) : ('a, formatter, unit) format) =
+  let ppf = formatter_of_buffer b in
+  let k acc = output_acc ppf acc; pp_flush_queue ppf false in
+  make_printf k End_of_acc fmt
+
+
+(* Deprecated : alias for ksprintf. *)
+let kprintf = ksprintf
+
+
+
+(* Deprecated tag functions *)
+
+type formatter_tag_functions = {
+  mark_open_tag : tag -> string;
+  mark_close_tag : tag -> string;
+  print_open_tag : tag -> unit;
+  print_close_tag : tag -> unit;
+}
 
-  let fs = pp_get_formatter_out_functions err_formatter () in
-  pp_set_formatter_out_functions err_formatter
-    {fs with out_string = buffered_out_string err_buf_key;
-             out_flush = buffered_out_flush Stdlib.stderr err_buf_key};
 
-  Domain.at_each_spawn (fun _ -> Domain.at_exit flush_standard_formatters))
+let pp_set_formatter_tag_functions state {
+     mark_open_tag = mot;
+     mark_close_tag = mct;
+     print_open_tag = pot;
+     print_close_tag = pct;
+   } =
+  let stringify f e = function String_tag s -> f s | _ -> e in
+  state.pp_mark_open_tag <- stringify mot "";
+  state.pp_mark_close_tag <- stringify mct "";
+  state.pp_print_open_tag <- stringify pot ();
+  state.pp_print_close_tag <- stringify pct ()
+
+let pp_get_formatter_tag_functions fmt () =
+  let funs = pp_get_formatter_stag_functions fmt () in
+  let mark_open_tag s = funs.mark_open_stag (String_tag s) in
+  let mark_close_tag s = funs.mark_close_stag (String_tag s) in
+  let print_open_tag s = funs.print_open_stag (String_tag s) in
+  let print_close_tag s = funs.print_close_stag (String_tag s) in
+  {mark_open_tag; mark_close_tag; print_open_tag; print_close_tag}
+
+let set_formatter_tag_functions =
+  pp_set_formatter_tag_functions std_formatter
+and get_formatter_tag_functions =
+  pp_get_formatter_tag_functions std_formatter
--- parser-upstream/format.mli
+++ ocamlformat_support/format.mli
@@@@
    functions.
    Some formatters are predefined, notably:
    - {!std_formatter} outputs to {{!Stdlib.stdout}stdout}
    - {!err_formatter} outputs to {{!Stdlib.stderr}stderr}
 
-   Most functions in the {!Format} module come in two variants: a short version
-   that operates on the current domain's standard formatter as obtained using
-   {!get_std_formatter} and the generic version prefixed by [pp_] that takes a
-   formatter as its first argument. For the version that operates on the
-   current domain's standard formatter, the call to {!get_std_formatter} is
-   delayed until the last argument is received.
+   Most functions in the {!Format} module come in two variants:
+   a short version that operates on {!std_formatter} and the
+   generic version prefixed by [pp_] that takes a formatter
+   as its first argument.
 
    More formatters can be created with {!formatter_of_out_channel},
-   {!formatter_of_buffer}, {!formatter_of_symbolic_output_buffer} or using
-   {{!section:formatter}custom formatters}.
+   {!formatter_of_buffer}, {!formatter_of_symbolic_output_buffer}
+   or using {{!section:formatter}custom formatters}.
 
-   Warning: Since {{!section:formatter}formatters} contain mutable state, it is
-   not thread-safe to use the same formatter on multiple domains in parallel
-   without synchronization.
-
-   If multiple domains write to the same output channel using the
-   predefined formatters (as obtained by {!get_std_formatter} or
-   {!get_err_formatter}), the output from the domains will be interleaved with
-   each other at points where the formatters are flushed, such as with
-   {!print_flush}. This synchronization is not performed by formatters obtained
-   from {!formatter_of_out_channel} (on the standard out channels or others).
 *)
 
 (** {1 Introduction}
 
    You may consider this module as providing an extension to the
@@@@
    for a custom formatter that handles indentation distinctly, for example,
    outputs [<br/>] tags or [&nbsp;] entities.
 
    The custom break is useful if you want to change which visible
    (non-whitespace) characters are printed in case of break or no break. For
-   example, when printing a list [ [a; b; c] ], you might want to add a
+   example, when printing a list {[ [a; b; c] ]}, you might want to add a
    trailing semicolon when it is printed vertically:
 
    {[
 [
   a;
@@@@
 (** Execute the next formatting command if the preceding line
   has just been split. Otherwise, ignore the next formatting
   command.
 *)
 
+val pp_print_string_if_newline : formatter -> string -> unit
+(** Similar to [print_if_newline] followed by [print_string] except that the
+  length of the string does not contribute to the width of the enclosing
+  box. *)
+
+val pp_print_or_newline : formatter -> int -> int -> string -> string -> unit
+(** Print a full break hint and the first string if the preceding line has
+  not just been split. Otherwise, print the second string. *)
+
+val pp_print_fits_or_breaks :
+  formatter -> ?level:int -> string -> int -> int -> string -> unit
+(** [pp_print_fits_or_breaks fmt ?level fits nspaces offset breaks] prints
+  [fits] if the enclosing boxes fits on one line ([level] being the depth of
+  boxes that are checked in the stack). Otherwise, prints a break as per
+  [print_break nspaces offset] followed by [breaks]. *)
+
 (** {1 Pretty-printing termination} *)
 
 val pp_print_flush : formatter -> unit -> unit
 val print_flush : unit -> unit
 (** End of pretty-printing: resets the pretty-printer to initial state.
@@@@
   formatter using those functions for output.
 *)
 
 val formatter_of_out_channel : out_channel -> formatter
 (** [formatter_of_out_channel oc] returns a new formatter writing
-    to the corresponding output channel [oc].
-*)
-
-val synchronized_formatter_of_out_channel :
-  out_channel -> formatter Domain.DLS.key
-(** [synchronized_formatter_of_out_channel oc] returns the key to the
-    domain-local state that holds the domain-local formatter for writing to the
-    corresponding output channel [oc].
-
-    When the formatter is used with multiple domains, the output from the
-    domains will be interleaved with each other at points where the formatter
-    is flushed, such as with {!print_flush}.
+  to the corresponding output channel [oc].
 *)
 
-
 val std_formatter : formatter
-(** The initial domain's standard formatter to write to standard output.
+(** The standard formatter to write to standard output.
 
   It is defined as {!formatter_of_out_channel} {!Stdlib.stdout}.
 *)
 
-val get_std_formatter : unit -> formatter
-(** [get_std_formatter ()] returns the current domain's standard formatter used
-    to write to standard output.
-*)
-
 val err_formatter : formatter
-(** The initial domain's formatter to write to standard error.
+(** A formatter to write to standard error.
 
   It is defined as {!formatter_of_out_channel} {!Stdlib.stderr}.
 *)
 
-val get_err_formatter : unit -> formatter
-(* [get_err_formatter ()] returns the current domain's formatter used to write
-   to standard error.
-*)
-
 val formatter_of_buffer : Buffer.t -> formatter
 (** [formatter_of_buffer b] returns a new formatter writing to
   buffer [b]. At the end of pretty-printing, the formatter must be flushed
   using {!pp_print_flush} or {!pp_print_newline}, to print all the
   pending material into the buffer.
 *)
 
 val stdbuf : Buffer.t
-(** The initial domain's string buffer in which [str_formatter] writes. *)
-
-val get_stdbuf : unit -> Buffer.t
-(** [get_stdbuf ()] returns the current domain's string buffer in which the
-    current domain's string formatter writes. *)
+(** The string buffer in which [str_formatter] writes. *)
 
 val str_formatter : formatter
-(** The initial domain's formatter to output to the {!stdbuf} string buffer.
+(** A formatter to output to the {!stdbuf} string buffer.
 
   [str_formatter] is defined as {!formatter_of_buffer} {!stdbuf}.
 *)
 
-val get_str_formatter : unit -> formatter
-(** The current domain's formatter to output to the current domains string
-    buffer.
-*)
-
 val flush_str_formatter : unit -> string
-(** Returns the material printed with [str_formatter] of the current domain,
-    flushes the formatter and resets the corresponding buffer.
+(** Returns the material printed with [str_formatter], flushes
+  the formatter and resets the corresponding buffer.
 *)
 
 val make_formatter :
   (string -> int -> int -> unit) -> (unit -> unit) -> formatter
 (** [make_formatter out flush] returns a new formatter that outputs with
   function [out], and flushes with function [flush].
 
-  For instance,
-  {[
+  For instance, {[
     make_formatter
       (Stdlib.output oc)
-      (fun () -> Stdlib.flush oc)
-  ]}
+      (fun () -> Stdlib.flush oc) ]}
   returns a formatter to the {!Stdlib.out_channel} [oc].
 *)
 
-val make_synchronized_formatter :
-  (string -> int -> int -> unit) -> (unit -> unit) -> formatter Domain.DLS.key
-(** [make_synchronized_formatter out flush] returns the key to the domain-local
-    state that holds the domain-local formatter that outputs with function
-    [out], and flushes with function [flush].
-
-    When the formatter is used with multiple domains, the output from the
-    domains will be interleaved with each other at points where the formatter
-    is flushed, such as with {!print_flush}.
-*)
-
 val formatter_of_out_functions :
   formatter_out_functions -> formatter
 (** [formatter_of_out_functions out_funs] returns a new formatter that writes
   with the set of output functions [out_funs].
 
@@@@
   [out_funs].
 
   @since 4.06.0
 *)
 
-
-
 (** {2:symbolic Symbolic pretty-printing} *)
 
 (**
   Symbolic pretty-printing is pretty-printing using a symbolic formatter,
   i.e. a formatter that outputs symbolic pretty-printing items.
@@@@
   It prints [x = 1] within a pretty-printing 'horizontal-or-vertical' box.
 
 *)
 
 val printf : ('a, formatter, unit) format -> 'a
-(** Same as [fprintf] above, but output on [get_std_formatter ()].
-
-    It is defined similarly to [fun fmt -> fprintf (get_std_formatter ()) fmt]
-    but delays calling [get_std_formatter] until after the final argument
-    required by the [format] is received. When used with multiple domains, the
-    output from the domains will be interleaved with each other at points where
-    the formatter is flushed, such as with {!print_flush}.
-*)
+(** Same as [fprintf] above, but output on [std_formatter]. *)
 
 val eprintf : ('a, formatter, unit) format -> 'a
-(** Same as [fprintf] above, but output on [get_err_formatter ()].
-
-    It is defined similarly to [fun fmt -> fprintf (get_err_formatter ()) fmt]
-    but delays calling [get_err_formatter] until after the final argument
-    required by the [format] is received. When used with multiple domains, the
-    output from the domains will be interleaved with each other at points where
-    the formatter is flushed, such as with {!print_flush}.
-*)
+(** Same as [fprintf] above, but output on [err_formatter]. *)
 
 val sprintf : ('a, unit, string) format -> 'a
 (** Same as [printf] above, but instead of printing on a formatter,
   returns a string containing the result of formatting the arguments.
   Note that the pretty-printer queue is flushed at the end of {e each
@@@@
 (** Same as [asprintf] above, but instead of returning the string,
   passes it to the first argument.
 
   @since 4.03
 *)
+
+(** {1 Deprecated} *)
+
+val bprintf : Buffer.t -> ('a, formatter, unit) format -> 'a
+  [@@ocaml.deprecated]
+(** @deprecated This function is error prone. Do not use it.
+  This function is neither compositional nor incremental, since it flushes
+  the pretty-printer queue at each call.
+
+  If you need to print to some buffer [b], you must first define a
+  formatter writing to [b], using [let to_b = formatter_of_buffer b]; then
+  use regular calls to [Format.fprintf] with formatter [to_b].
+*)
+
+val kprintf : (string -> 'a) -> ('b, unit, string, 'a) format4 -> 'b
+  [@@ocaml.deprecated "Use Format.ksprintf instead."]
+(** @deprecated An alias for [ksprintf]. *)
+
+val set_all_formatter_output_functions :
+  out:(string -> int -> int -> unit) ->
+  flush:(unit -> unit) ->
+  newline:(unit -> unit) ->
+  spaces:(int -> unit) ->
+  unit
+[@@ocaml.deprecated "Use Format.set_formatter_out_functions instead."]
+(** @deprecated Subsumed by [set_formatter_out_functions]. *)
+
+val get_all_formatter_output_functions :
+  unit ->
+  (string -> int -> int -> unit) *
+  (unit -> unit) *
+  (unit -> unit) *
+  (int -> unit)
+[@@ocaml.deprecated "Use Format.get_formatter_out_functions instead."]
+(** @deprecated Subsumed by [get_formatter_out_functions]. *)
+
+val pp_set_all_formatter_output_functions :
+  formatter -> out:(string -> int -> int -> unit) -> flush:(unit -> unit) ->
+  newline:(unit -> unit) -> spaces:(int -> unit) -> unit
+[@@ocaml.deprecated "Use Format.pp_set_formatter_out_functions instead."]
+(** @deprecated Subsumed by [pp_set_formatter_out_functions]. *)
+
+val pp_get_all_formatter_output_functions :
+  formatter -> unit ->
+  (string -> int -> int -> unit) * (unit -> unit) * (unit -> unit) *
+  (int -> unit)
+[@@ocaml.deprecated "Use Format.pp_get_formatter_out_functions instead."]
+(** @deprecated Subsumed by [pp_get_formatter_out_functions]. *)
+
+(** {2 String tags} *)
+
+val pp_open_tag : formatter -> tag -> unit
+[@@ocaml.deprecated "Use Format.pp_open_stag."]
+(** @deprecated Subsumed by {!pp_open_stag}. *)
+
+val open_tag : tag -> unit
+[@@ocaml.deprecated "Use Format.open_stag."]
+(** @deprecated Subsumed by {!open_stag}. *)
+
+val pp_close_tag : formatter -> unit -> unit
+[@@ocaml.deprecated "Use Format.pp_close_stag."]
+(** @deprecated Subsumed by {!pp_close_stag}. *)
+
+val close_tag : unit -> unit
+[@@ocaml.deprecated "Use Format.close_stag."]
+(** @deprecated Subsumed by {!close_stag}. *)
+
+type formatter_tag_functions = {
+  mark_open_tag : tag -> string;
+  mark_close_tag : tag -> string;
+  print_open_tag : tag -> unit;
+  print_close_tag : tag -> unit;
+}
+[@@ocaml.deprecated "Use formatter_stag_functions."]
+(** @deprecated Subsumed by {!formatter_stag_functions}. *)
+
+val pp_set_formatter_tag_functions :
+  formatter -> formatter_tag_functions -> unit
+[@@ocaml.deprecated
+  "This function will erase non-string tag formatting functions. \
+   Use Format.pp_set_formatter_stag_functions."]
+[@@warning "-3"]
+(** This function will erase non-string tag formatting functions.
+    @deprecated Subsumed by {!pp_set_formatter_stag_functions}. *)
+
+val set_formatter_tag_functions : formatter_tag_functions -> unit
+[@@ocaml.deprecated "Use Format.set_formatter_stag_functions."]
+[@@warning "-3"]
+(** @deprecated Subsumed by {!set_formatter_stag_functions}. *)
+
+val pp_get_formatter_tag_functions :
+  formatter -> unit -> formatter_tag_functions
+[@@ocaml.deprecated "Use Format.pp_get_formatter_stag_functions."]
+[@@warning "-3"]
+(** @deprecated Subsumed by {!pp_get_formatter_stag_functions}. *)
+
+val get_formatter_tag_functions : unit -> formatter_tag_functions
+[@@ocaml.deprecated "Use Format.get_formatter_stag_functions."]
+[@@warning "-3"]
+(** @deprecated Subsumed by {!get_formatter_stag_functions}. *)
